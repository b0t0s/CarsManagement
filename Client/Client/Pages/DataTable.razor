@page "/DataTable"
@using CarsManagement.Shared.Extensions
@using CarsManagement.Shared.DTO
@using CarsManagement.Client.Components

@inject HttpClient http
@inject CustomAuthenticationStateProvider AuthStateProvider

<PageTitle>Available data</PageTitle>

<!-- Input Form -->
<div class="input-group mb-3">
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="LoadData">Load Data</button>
        <button class="btn btn-secondary" @onclick="ToggleView">Toggle View</button>
    </div>
</div>

<div class="horizontal-divider"></div>

@if (IsListView)
{
    @if (Manager != null)
    {
        <div class="card-deck mb-4">
            <div class="card m-3">
                <div class="card-header">
                    <h5 class="card-title">@Manager.AccountName</h5>
                </div>
                <div class="card-body">
                    @if (Manager.ManagedParkingLots != null && Manager.ManagedParkingLots.Any())
                    {
                        <p>
                            <strong>Managed Parking Lots:</strong>
                        </p>
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Lot ID</th>
                                <th>Spots</th>
                                <th>Parked</th>
                                <th>Inclusive Occupied</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var lot in Manager.ManagedParkingLots)
                            {
                                <tr>
                                    <td>@lot?.LotId</td>
                                    <td>@lot?.ParkingSpots?.Count</td>
                                    <td>@lot?.ParkingSpots?.Count(spot => spot.IsOccupied)</td>
                                    <td>@lot?.ParkingSpots?.Count(spot => spot.IsOccupied && spot.IsInclusive)</td> <!-- New cell for inclusive occupied spots count -->
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No managed parking lots available.</p>
                    }
                </div>
            </div>

        </div>
    }
}
else
{
    if (Manager != null)
    {
        <div class="row">

            <div class="col-md-4">
                <div class="card m-3">
                    <div class="card-header">
                        <h5 class="card-title">@Manager.AccountName</h5>
                    </div>
                    <div class="card-body">
                        @if (Manager.ManagedParkingLots != null && Manager.ManagedParkingLots.Any())
                        {
                            <p>
                                <strong>Managed Parking Lots:</strong>
                            </p>
                            <table class="table">
                                <thead>
                                <tr>
                                    <th>Lot ID</th>
                                    <th>Spots</th>
                                    <th>Parked</th>
                                    <th>Inclusive Occupied</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var lot in Manager.ManagedParkingLots)
                                {
                                    <tr>
                                        <td>@lot?.LotId</td>
                                        <td>@lot?.ParkingSpots?.Count</td>
                                        <td>@lot?.ParkingSpots?.Count(spot => spot.IsOccupied)</td>
                                        <td>@lot?.ParkingSpots?.Count(spot => spot.IsOccupied && spot.IsInclusive)</td> <!-- New cell for inclusive occupied spots count -->
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>No managed parking lots available.</p>
                        }
                    </div>
                </div>
            </div>

        </div>
    }
}

@if (Lots != null)
{
    @foreach (var lot in Lots)
    {
        <div>
            <SpotsTable ParkingLot="lot" AvailableSpots="lot.GetAvailableSpotIds()" SelectedSpot="-1"/>
        </div>
    }
}

@if (Cars != null)
{
    <h2>Cars Data</h2>
    <table class="table table-bordered table-hover">
        <thead class="thead-dark">
        <tr>
            <th>Car ID</th>
            <th>Brand</th>
            <th>Model</th>
            <th>License Plate</th>
            <th>Amount Paid</th>
            <th>Entry Time</th>
            <th>Exit Time</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var car in Cars)
        {
            <tr>
                <td>@car?.Id</td>
                <td>@car?.Brand</td>
                <td>@car?.Model</td>
                <td>@car?.LicensePlate</td>
                <td>@car?.Ticket?.AmountPaid</td>
                <td>@car?.Ticket?.EntryTime (@GetTimeDifference(car?.Ticket?.EntryTime ?? DateTime.Now, false))</td>
                <td>@car?.Ticket?.ExitTime (In @GetTimeDifference(car?.Ticket?.ExitTime ?? DateTime.Now, true))</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool IsListView { get; set; } = true;

    private string SelectedManager { get; } = string.Empty;

    private Timer _timer; // Timer to update the page

    private ManagerDTO Manager { get; set; } = new();
    private List<ParkingLotDTO> Lots { get; } = new();
    private List<ParkingSpotDTO> Spots { get; } = new();
    private List<CarDTO> Cars { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        _timer = new Timer(Update, null, 0, 60000); // Update every minute

        Manager = await http.GetFromJsonAsync<ManagerDTO>($"/Managers/Manager/Name/{AuthStateProvider.User.Identity.Name}");
    }

    private async Task LoadData()
    {
        Console.WriteLine($"Filtering data by selected {SelectedManager} manager");

        if (SelectedManager != null)
        {
            if (Manager != null)
            {
                if (Manager.ManagedParkingLots != null)
                    Lots.AddRange(Manager.ManagedParkingLots.OrderByDescending(x => x.ParkingSpots.Count));

                Console.WriteLine($"Selected {SelectedManager} manager have {Lots.Count} under control");

                if (Manager.ManagedParkingLots.SelectMany(x => x.ParkingSpots) != null)
                    Spots.AddRange(Manager.ManagedParkingLots.SelectMany(x => x.ParkingSpots));

                Console.WriteLine($"Selected {SelectedManager} manager have {Spots.Count} under control");

                foreach (var spot in Spots)
                {
                    Cars.Add(spot.ParkedCar);
                }

                Console.WriteLine($"Selected {SelectedManager} manager have {Cars.Count} under control");

                Console.WriteLine("Filtered");

                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Manager is null");
            }
        }
    }

    private string GetTimeDifference(DateTime dateTime, bool isFuture)
    {
        var timeSpan = isFuture ? dateTime - DateTime.Now : DateTime.Now - dateTime;
        var daysPart = timeSpan.Days > 0 ? $"{timeSpan.Days} day{(timeSpan.Days > 1 ? "s" : "")}, " : "";
        var timePart = $"{timeSpan.Hours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}";
        return $"{daysPart}{timePart}";
    }

    private void ToggleView() // New method to toggle view
    {
        IsListView = !IsListView;
    }

    private void Update(object? state)
    {
        StateHasChanged(); // Request a re-render
    }

    public void Dispose()
    {
        _timer?.Dispose(); // Clean up the Timer when the component is disposed
    }

}