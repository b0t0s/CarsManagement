@page "/LotBuilder"
@using CarsManagement.Shared.DTO
@using CarsManagement.Client.Application.Builders
@using CarsManagement.Client.Components
@using CarsManagement.Client.Application
@using CarsManagement.Shared.Extensions

@inject IParkingLotBuilder<ParkingLotDTO, ParkingSpotDTO> LotsBuilder
@inject IParkingSpotBuilder<ParkingSpotDTO, CarDTO, TicketDTO> SpotsBuilder

@inject HttpClient http
@inject CustomAuthenticationStateProvider AuthStateProvider

<PageTitle>LotBuilder</PageTitle>

<!-- Input Form -->
<EditForm Model="ParkingLotModel" OnValidSubmit="BuildLot">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="input-group mb-3">
        <input type="text" @bind="ParkingLotModel.LotName" placeholder="Lot Name" class="form-control mb-2" />
        <input type="text" @bind="ParkingLotModel.LotLocation" placeholder="Lot Location" class="form-control mb-2" />
        <input type="number" min="1" @bind="ParkingLotModel.SpotCount" placeholder="Spots amount" class="form-control mb-2" />
        <div class="input-group-append">
            <button class="btn btn-primary mb-2" type="submit">Build Lot</button>
        </div>
    </div>
</EditForm>

<div>
    @if (ParkingLot != null && ParkingLot.ParkingSpots.Count > 0)
    {
        <SpotsTable ParkingLot="ParkingLot" AvailableSpots="ParkingLot.GetAvailableSpotIds()" SelectedSpot="-1" />
    }
</div>

@code {
    public ParkingLotDTO ParkingLot { get; set; } = new ParkingLotDTO();
    public ManagerDTO Manager { get; set; }
    public ParkingLotModel ParkingLotModel { get; set; } = new ParkingLotModel();

    protected override async Task OnInitializedAsync()
    {
        Manager = await http.GetFromJsonAsync<ManagerDTO>($"/Managers/Manager/Name/{AuthStateProvider.User.Identity.Name}") ?? new ManagerDTO();
    }
    private async Task BuildLot()
    {
        var spots = new List<ParkingSpotDTO>();

        for (var i = 0; i < ParkingLotModel.SpotCount; i++)
        {
            var spot = SpotsBuilder.SetSpotId(i).Build();

            spot = SpotsBuilder
                .SetSpotId(i)
                .SetCar(null)
                .SetTicket(null)
                .Build();

            spots.Add(spot);
        }

        ParkingLot = LotsBuilder
            .SetManagerId(Manager.Id)
            .SetLotName(ParkingLotModel.LotName)
            .SetLotLocation(ParkingLotModel.LotLocation)
            .SetLotsSpots(spots)
            .Build();

        Manager.ManagedParkingLots.Add(ParkingLot);

        Manager.AccountName = AuthStateProvider.User.Identity.Name;

        var response = await http.PutAsJsonAsync($"/Managers/{Manager.Id}", Manager);

        Console.WriteLine(response);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Parking successful");
        }
        else
        {
            Console.WriteLine("Failed to park the car");
        }

    }

}