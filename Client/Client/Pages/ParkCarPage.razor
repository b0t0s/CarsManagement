@page "/park"
@using CarsManagement.Shared.Extensions
@using CarsManagement.Shared.DTO
@using CarsManagement.Client.Application.Builders
@using CarsManagement.Client.Components
@using CarsManagement.Client.Application

@inject ICarBuilder<CarDTO, TicketDTO> CarsBuilder
@inject IParkingSpotBuilder<ParkingSpotDTO, CarDTO, TicketDTO> SpotsBuilder

@inject HttpClient http
@inject CustomAuthenticationStateProvider AuthStateProvider

<PageTitle>Park</PageTitle>

<!-- Input Form -->
<EditForm Model="ParkingModel" OnValidSubmit="Park">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="input-group mb-3">
        <select @bind="ParkingModel.SelectedLot" class="form-control mb-2">
            <option value="">Select lot</option>
            @foreach (var lot in Manager.ManagedParkingLots)
            {
                <option value="@lot.LotName">@lot.LotName</option>
            }
        </select>

        <select @bind="ParkingModel.SelectedSpot" class="form-control mb-2">
            <option value="">Select spot</option>
            @foreach (var lot in Manager.ManagedParkingLots)
            {
                foreach (var spot in lot.ParkingSpots)
                {
                    <option value="@spot.Id">@spot.Id</option>
                }
            }
        </select>

        <input type="text" @bind="ParkingModel.Brand" placeholder="Brand" class="form-control mb-2" />
        <input type="text" @bind="ParkingModel.Model" placeholder="Model" class="form-control mb-2" />
        <input type="text" @bind="ParkingModel.LicensePlate" placeholder="License" class="form-control mb-2" />
        <DatePicker DateSelected="HandleDateSelected" />

        <div class="input-group-append">
            <button class="btn btn-primary mb-2" type="submit">Reserve</button>
        </div>
    </div>
</EditForm>

@foreach (var lot in Manager?.ManagedParkingLots ?? Enumerable.Empty<ParkingLotDTO>())
{
    <div>
        <SpotsTable ParkingLot="lot" AvailableSpots="lot.GetAvailableSpotIds()" SelectedSpot="@ParkingModel.SelectedSpot" />
    </div>
}

@code {
    public ManagerDTO Manager { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(ParkingModel);
        Manager = await http.GetFromJsonAsync<ManagerDTO>($"/Managers/Manager/Name/{AuthStateProvider.User.Identity.Name}") ?? new ManagerDTO();
        Console.Clear();
    }

    private EditContext EditContext { get; set; }

    private ParkingModel ParkingModel { get; set; } = new ParkingModel();

    private void HandleDateSelected(DateTime date)
    {
        ParkingModel.ExitTime = date;
        EditContext.NotifyValidationStateChanged(); // Notify the form about the change
    }

    public void Park()
    {
        if (EditContext.Validate())
        {
            ParkCar(BuildCar());
        }
    }

    private CarDTO BuildCar()
    {
        var car = CarsBuilder
            .SetBrand(ParkingModel.Brand)
            .SetModel(ParkingModel.Model)
            .SetLicensePlate(ParkingModel.LicensePlate)
            .Build();

        return car;
    }

    private async Task ParkCar(CarDTO car)
    {
        var spot = SpotsBuilder
            .SetSpotId(ParkingModel.SelectedSpot)
            .SetOccupied(true)
            .SetCar(car)
            .SetTicket(new TicketDTO
            {
                AmountPaid = (decimal)((ParkingModel.ExitTime - DateTime.Now).Days * 10 + (ParkingModel.ExitTime - DateTime.Now).TotalHours),
                EntryTime = DateTime.Now,
                ExitTime = DateTime.Now + TimeSpan.FromDays(1)
            })
            .Build();

        Manager.ManagedParkingLots.FirstOrDefault(x => x.LotName == ParkingModel.SelectedLot).ParkingSpots.FirstOrDefault(y => y.Id == ParkingModel.SelectedSpot).Id = spot.Id;
        Manager.ManagedParkingLots.FirstOrDefault(x => x.LotName == ParkingModel.SelectedLot).ParkingSpots.FirstOrDefault(y => y.Id == ParkingModel.SelectedSpot).IsOccupied = spot.IsOccupied;
        Manager.ManagedParkingLots.FirstOrDefault(x => x.LotName == ParkingModel.SelectedLot).ParkingSpots.FirstOrDefault(y => y.Id == ParkingModel.SelectedSpot).ParkedCar = spot.ParkedCar;
        Manager.ManagedParkingLots.FirstOrDefault(x => x.LotName == ParkingModel.SelectedLot).ParkingSpots.FirstOrDefault(y => y.Id == ParkingModel.SelectedSpot).Ticket = spot.Ticket;

        Manager.AccountName = AuthStateProvider.User.Identity.Name;

        Console.WriteLine(Manager);

        var response = await http.PutAsJsonAsync($"/Managers/{Manager.Id}", Manager);

        Console.WriteLine(response);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Parking successful");
        }
        else
        {
            Console.WriteLine("Failed to park the car");
        }
    }

}